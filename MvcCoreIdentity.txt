Humble advice :
>>> If you are a complete beginner, you should follow this tutorial without any additionl thoughts.... so you can get clean understanding of all different things and can learn how they work together.. yes but if you are planning to do this with latest version of asp.net core (for my case it is 2.2) then only you should go further and read this document...

All the best !!!!
--------------------

Here, Follow all the steps mentioned by Wes for Project & Solution creation except selection of Authentication type in application template selection as we will implement that manually..(https://youtu.be/eZKSzJhM8xk?t=67)

Next, create two additional projects under this solution, one for Data and another for Services (every thing is shown in very nice way by Wes so please reach upto that level by following instructions mentioned by Wes..)

now, after reaching at this stage, we need to implement Identiy (Login/Logout) in this application. 

---
ASP.NET Core 2.1 and later provides ASP.NET Core Identity as a Razor Class Library. Applications that include Identity can apply the scaffolder to selectively add the source code contained in the Identity Razor Class Library (RCL). You might want to generate source code so you can modify the code and change the behavior.
(Ref : https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-2.2&tabs=visual-studio#scaffold-identity-into-an-mvc-project-with-authorization)

Next,

Complete <<STEP 2>> before moving down..

Now,

From Solution Explorer, right-click on the web project > Add > New Scaffolded Item.
From the left pane of the Add Scaffold dialog, select Identity > ADD.
In the ADD Identity dialog, select the options you want. >>>>>>>>>> Here, I selected Login, Logout, Register,Account/Register ---> you can select more if you need more features...
Select your existing layout page, or your layout file will be overwritten with incorrect markup. When an existing _Layout.cshtml file is selected, it is not overwritten.
For example ~/Pages/Shared/_Layout.cshtml for Razor Pages ~/Views/Shared/_Layout.cshtml for MVC projects

To use your existing data context, select at least one file to override. You must select at least one file to add your data context.  >> this is related to DbContext file... in our case LambdaForumContext.cs file

Select your data context class.
Select ADD.
To create a new user context and possibly create a custom user class for Identity:
Select the + button to create a new Data context class.
Select ADD.
Note: If you're creating a new user context, you don't have to select a file to override.

Delete the Pages/Shared folder OR All Child folders under Area folder  and the files in that folder.  >>> Currently we are not planning to add/modify any additional functionality in Identity feature so we don't need any extra source code which be generated by scaffolder. 

(Ref : https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-2.2&tabs=visual-studio#scaffold-identity-into-an-mvc-project-with-authorization)




<<STEP 1>>

Add below line in _Layout.cshtml file next to below div
**********
<div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
	...
</div>

<partial name="_LoginPartial" />
********


<<STEP 2>>
I have created below classes which are used in startup.cs file  >> these files are created in Data project which are referenced in web project.
******************
    public class LambdaForumUser : IdentityUser
    {
        public int Rating { get; set; }
        public string ProfileImageUrl { get; set; }
        public DateTime MemeberSince { get; set; }
        public bool IsActive { get; set; }
    }

	
 public class LambdaForumContext : IdentityDbContext<LambdaForumUser>
    {
        public LambdaForumContext(DbContextOptions<LambdaForumContext> options)
            : base(options)
        {}
        public DbSet<Forum> Forums { get; set; }
        public DbSet<Post> Posts { get; set; }
        public DbSet<PostReply> PostReplies { get; set; }
        public DbSet<LambdaForumUser> LambdaForumUser { get; set; }
    }	
******************


<<STEP 3>>
Add below lines in Configure method of Startup.cs file above services.AddMvc() line...

***************
            services.AddDbContext<LambdaForumContext>(options =>
                    options.UseSqlServer(
                        Configuration.GetConnectionString("WebApplication1ContextConnection")));

            services.AddDefaultIdentity<LambdaForumUser>()
                .AddEntityFrameworkStores<LambdaForumContext>();
				
			services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);

****************



